#pragma once

#include <vector>

#include "utils.h"

namespace huffman {
static const std::vector<unsigned> literal_lengths_freq = {
    22517, 2020, 1567, 1319, 1075, 889, 758, 811, 695, 766, 813, 667, 478, 423, 468, 566, 540, 501, 500, 446, 530, 511,
    537, 655, 677, 787, 824, 911, 807, 1037, 522, 430, 449, 366, 371, 339, 271, 239, 222, 224, 426, 209, 176, 203, 169,
    184, 180, 166, 166, 214, 136, 112, 137, 136, 164, 150, 157, 123, 126, 119, 147, 131, 146, 139, 142, 88, 101, 89, 84,
    73, 67, 81, 89, 64, 67, 54, 62, 59, 60, 67, 66, 68, 59, 51, 56, 67, 73, 75, 89, 52, 41, 43, 38, 42, 48, 38, 64, 28,
    29, 26, 34, 22, 33, 26, 24, 13, 31, 19, 15, 24, 19, 17, 21, 27, 10, 22, 28, 28, 20, 24, 14, 17, 11, 14, 28, 18, 18,
    14, 21, 17, 12, 24, 12, 21, 20, 15, 11, 15, 15, 12, 15, 15, 15, 19, 15, 12, 17, 17, 32, 14, 19, 12, 5, 10, 13, 11,
    12, 6, 7, 23, 13, 18, 6, 5, 14, 15, 18, 4, 8, 7, 9, 11, 5, 20, 5, 6, 6, 8, 11, 7, 9, 8, 8, 10, 7, 15, 3, 9, 5, 10,
    8, 9, 3, 4, 5, 10, 4, 6, 9, 13, 3, 3, 6, 2, 6, 5, 6, 7, 17, 5, 5, 3, 2, 6, 6, 8, 4, 11, 9, 10, 7, 9, 8, 5, 5, 6, 7,
    4, 5, 16, 15, 15, 14, 14, 28, 39, 37, 44, 66, 84, 100, 135, 160, 177, 252, 261, 336, 361, 419, 426, 405, 364, 295,
    257, 236, 215, 158, 114, 100, 37, 30, 31, 36, 38, 45, 32, 43, 61, 58, 37, 43, 37, 43, 44, 45, 46, 36, 55, 38, 55,
    53, 56, 61, 47, 32, 36, 31, 27, 32, 35, 39, 35, 43, 43, 33, 32, 28, 37, 24, 24, 25, 33, 33, 25, 36, 34, 38, 33, 40,
    36, 42, 18, 25, 19, 18, 32, 30, 25, 24, 22, 18, 14, 20, 7, 6, 8, 14, 10, 17, 22, 12, 8, 14, 7, 16, 10, 8, 12, 8, 7,
    10, 11, 24, 10, 5, 11, 11, 20, 10, 4, 6, 6, 5, 3, 7, 3, 3, 4, 2, 2, 8, 3, 5, 5, 7, 5, 2, 7, 6, 1, 2, 2, 3, 6, 3, 4,
    3, 6, 2, 5, 1, 1, 5, 2, 4, 2, 3, 3, 4, 1, 3, 5, 4, 5, 0, 4, 2, 2, 2, 2, 3, 1, 3, 4, 3, 2, 1, 3, 0, 1, 1, 3, 3, 5, 3,
    3, 0, 1, 1, 5, 2, 2, 2, 2, 1, 2, 2, 2, 4, 2, 2, 3, 3, 1, 3, 4, 3, 3, 0, 5, 2, 4, 3, 3, 3, 5, 2, 3, 7, 2, 1, 3, 3, 2,
    2, 3, 1, 1, 2, 1, 2, 2, 2, 4, 1, 3, 1, 0, 2, 0, 1, 4, 3, 2, 3, 3, 2, 1, 1, 3, 3, 2, 2, 1, 2, 4, 2, 3, 4, 1, 2, 1, 1,
    3, 6, 2, 8, 10, 6, 11, 4650
};

static const std::vector<unsigned> cell_id_offset_freq = {
    923, 4455, 1159, 760, 810, 677, 501, 527, 501, 427, 381, 397, 294, 341, 322, 312, 297, 358, 347, 388, 382, 440, 346,
    345, 291, 235, 226, 194, 193, 174, 161, 173, 167, 146, 193, 209, 184, 215, 198, 206, 207, 228, 218, 225, 217, 190,
    192, 195, 156, 144, 121, 136, 112, 107, 130, 118, 128, 134, 152, 152, 157, 161, 154, 132, 139, 150, 148, 118, 121,
    108, 152, 94, 129, 136, 143, 113, 116, 78, 105, 99, 102, 108, 117, 93, 105, 119, 114, 97, 108, 109, 115, 97, 97, 98,
    87, 77, 77, 89, 93, 85, 70, 78, 94, 74, 99, 76, 98, 93, 102, 68, 65, 82, 79, 83, 81, 71, 69, 54, 81, 85, 102, 71,
    94, 85, 82, 93, 73, 61, 84, 74, 68, 66, 70, 90, 84, 96, 72, 67, 62, 62, 74, 82, 71, 85, 68, 80, 79, 70, 59, 51, 70,
    60, 73, 66, 58, 60, 56, 50, 72, 43, 48, 74, 51, 52, 63, 53, 60, 50, 49, 66, 55, 54, 57, 46, 47, 50, 61, 47, 41, 48,
    43, 65, 56, 50, 54, 50, 56, 51, 36, 51, 30, 39, 45, 54, 42, 48, 41, 48, 50, 54, 49, 37, 58, 59, 61, 51, 45, 47, 38,
    46, 38, 34, 62, 35, 40, 57, 44, 65, 52, 58, 49, 61, 45, 40, 23, 45, 35, 46, 48, 38, 40, 31, 36, 43, 36, 45, 37, 26,
    47, 29, 38, 40, 39, 37, 33, 38, 38, 48, 26, 35, 41, 45, 29, 43, 41, 37, 42, 42, 30, 38, 33, 33, 49, 38, 44, 35, 31,
    28, 37, 34, 37, 24, 35, 30, 28, 30, 33, 24, 44, 24, 36, 21, 25, 35, 29, 23, 34, 39, 40, 48, 19, 37, 46, 37, 26, 34,
    30, 30, 27, 22, 50, 34, 33, 37, 39, 26, 37, 29, 47, 26, 24, 24, 31, 59, 32, 61, 38, 19, 45, 38, 34, 24, 28, 28, 24,
    30, 31, 21, 20, 36, 26, 32, 36, 24, 28, 28, 24, 31, 15, 27, 38, 26, 38, 29, 26, 32, 31, 26, 17, 28, 38, 29, 70, 40,
    57, 22, 48, 29, 37, 21, 27, 39, 38, 27, 23, 34, 33, 26, 26, 40, 45, 23, 30, 35, 32, 71, 22, 107, 35, 38, 39, 37, 32,
    31, 23, 79, 26, 37, 30, 22, 27, 32, 24, 20, 16, 24, 11, 27, 23, 22, 28, 27, 20, 34, 39, 16, 35, 31, 19, 34, 36, 40,
    61, 21, 65, 31, 27, 31, 23, 34, 32, 23, 20, 26, 35, 21, 23, 30, 21, 20, 17, 29, 23, 18, 24, 15, 29, 27, 29, 22, 21,
    26, 16, 11, 22, 20, 17, 25, 19, 24, 28, 23, 21, 23, 20, 28, 30, 17, 26, 23, 28, 23, 27, 21, 23, 20, 29, 34, 38, 30,
    45, 29, 31, 29, 49, 22, 35, 32, 37, 29, 16, 23, 36, 15, 20, 22, 22, 16, 17, 22, 27, 28, 16, 21, 24, 24, 23, 22, 13,
    12, 16, 28, 17, 19, 24, 24, 42, 22, 12, 31, 22, 23, 31, 86, 27, 32, 27, 43, 24, 30, 17, 22, 21, 16, 16, 23, 30, 11,
    16, 23, 24, 19, 65, 25, 47, 18, 39, 19, 30, 18, 28, 21, 57, 25, 29, 27, 26, 109, 25, 53, 26, 48, 19, 46, 14, 36, 17,
    18, 18, 15, 55, 21, 27, 40, 25, 67, 20, 29, 16, 23, 17, 35, 14, 17, 20, 35, 28, 24, 16, 37, 16, 51, 26, 19, 10, 17,
    41, 42, 42, 40, 78, 28, 70, 28, 28, 23, 28, 61, 25, 32, 21, 30, 22, 30, 78, 28, 22, 28, 34, 16, 27, 20, 35, 25, 22,
    20, 17, 27, 41, 15, 25, 17, 29, 28, 46, 16, 23, 25, 24, 40, 22, 31, 18, 29, 15, 47, 15, 37, 20, 11, 22, 20, 15, 19,
    19, 12, 12, 12, 15, 15, 15, 14, 14, 17, 52, 20, 22, 17, 32, 15, 47, 17, 25, 25, 31, 19, 13, 32, 20, 28, 17, 30, 12,
    28, 21, 18, 12, 26, 12, 8, 21, 20, 19, 24, 15, 24, 18, 11, 41, 15, 13, 26, 17, 28, 13, 17, 12, 13, 11, 9, 14, 9, 18,
    11, 11, 20, 10, 13, 13, 13, 13, 16, 16, 8, 14, 17, 14, 19, 6, 16, 10, 14, 13, 16, 13, 12, 10, 6, 16, 13, 19, 13, 19,
    22, 17, 15, 13, 18, 7, 18, 16, 16, 13, 12, 21, 10, 20, 15, 15, 19, 15, 16, 21, 19, 17, 17, 15, 14, 19, 11, 13, 19,
    23, 16, 23, 13, 15, 15, 14, 20, 15, 14, 11, 12, 15, 13, 10, 13, 10, 15, 15, 15, 8, 17, 28, 41, 20, 22, 31, 14, 15,
    15, 19, 15, 11, 61, 19, 15, 17, 18, 15, 22, 13, 23, 13, 20, 15, 16, 14, 17, 12, 15, 13, 17, 22, 11, 29, 20, 23, 10,
    25, 10, 17, 20, 9, 14, 13, 14, 23, 12, 11, 18, 13, 14, 15, 14, 13, 13, 18, 8, 17, 22, 11, 7, 16, 22, 17, 13, 13, 12,
    12, 11, 12, 16, 13, 10, 15, 10, 13, 16, 12, 20, 12, 12, 14, 15, 18, 12, 15, 17, 8, 12, 17, 36, 20, 16, 18, 11, 7,
    14, 13, 21, 19, 19, 18, 16, 12, 18, 14, 14, 13, 12, 23, 16, 9, 24, 11, 48, 15, 75, 39, 13, 20, 13, 37, 17, 19, 22,
    17, 15, 22, 13, 24, 11, 17, 22, 89, 15, 49, 22, 17, 28, 47, 24, 17, 41, 11, 16, 31, 18, 26, 43, 55, 47, 70, 66, 53,
    77, 49, 48, 40, 24, 42, 41, 48, 47, 27, 58, 37, 58, 29, 30, 42, 11, 9, 24, 10, 42, 34, 42, 31, 35, 39, 15, 74, 19,
    48, 11, 127, 13, 30, 15, 30, 32, 26, 15, 13, 10, 18, 12, 35, 11, 11, 42, 29, 13, 23, 13, 33, 12, 44, 12, 21, 18, 23,
    11, 17, 9, 15, 7, 14870
};

static const std::vector<unsigned> offset_within_cell_freq = {
    753, 873, 368, 505, 1397, 1291, 1295, 844, 727, 721, 788, 808, 846, 876, 951, 1065, 1000, 893, 792, 678, 590, 626,
    596, 672, 732, 839, 846, 1098, 728, 626, 424, 381, 379, 397, 423, 443, 363, 350, 259, 285, 266, 299, 205, 202, 190,
    235, 232, 199, 333, 166, 205, 487, 185, 163, 267, 151, 131, 100, 127, 108, 106, 118, 104, 86, 87, 70, 62, 46, 90,
    112, 161, 188, 231, 236, 167, 216, 220, 269, 220, 371, 175, 287, 121, 232, 409, 466, 532, 802, 210, 367, 129, 142,
    230, 258, 441, 376, 543, 172, 180, 92, 86, 94, 82, 74, 139, 113, 136, 197, 97, 43, 36, 59, 66, 49, 38, 35, 39, 62,
    120, 117, 178, 123, 124, 109, 75, 68, 75, 72, 48, 50, 57, 35, 28, 19, 24, 18, 21, 45, 30, 22, 22, 30, 23, 39, 50,
    66, 50, 36, 24, 21, 16, 22, 33, 14, 24, 17, 18, 16, 27, 14, 21, 26, 20, 29, 18, 22, 16, 11, 18, 30, 16, 13, 34, 18,
    28, 22, 40, 13, 18, 13, 16, 6, 18, 2, 8, 9, 11, 14, 15, 11, 14, 10, 5, 12, 8, 22, 24, 7, 9, 13, 10, 7, 8, 6, 4, 2,
    13, 15, 10, 10, 3, 13, 4, 14, 11, 2, 3, 9, 14, 7, 12, 8, 21, 7, 9, 3, 8, 3, 9, 6, 2, 2, 6, 9, 3, 7, 6, 11, 6, 6, 11,
    10, 8, 20, 13, 14, 12, 16, 17, 28, 21, 12, 19, 13, 10, 23, 26, 31, 46, 84, 146, 221, 371, 453, 564, 523, 446, 461,
    389, 357, 324, 27, 40, 48, 123, 64, 59, 45, 43, 53, 71, 93, 135, 137, 127, 110, 47, 70, 60, 74, 66, 102, 130, 164,
    117, 144, 92, 96, 53, 64, 60, 72, 77, 120, 96, 79, 56, 87, 53, 33, 103, 44, 30, 79, 40, 41, 28, 29, 20, 29, 27, 49,
    59, 64, 67, 77, 98, 74, 67, 94, 62, 62, 44, 38, 26, 31, 44, 44, 71, 86, 106, 97, 81, 64, 45, 52, 40, 36, 37, 49, 35,
    19, 23, 28, 41, 29, 19, 38, 57, 55, 55, 77, 72, 74, 31, 68, 86, 111, 105, 102, 83, 53, 54, 75, 216, 112, 127, 41,
    25, 18, 18, 22, 13, 20, 34, 52, 65, 46, 51, 47, 50, 35, 63, 27, 8, 11, 12, 7, 22, 12, 18, 22, 23, 25, 36, 26, 46,
    35, 43, 47, 29, 31, 26, 30, 21, 18, 24, 12, 11, 11, 14, 19, 17, 22, 33, 41, 62, 23, 57, 72, 141, 89, 176, 69, 72,
    30, 28, 46, 18, 13, 15, 5, 7, 10, 16, 14, 20, 12, 17, 21, 23, 26, 24, 31, 20, 21, 9, 8, 6, 11, 12, 11, 14, 15, 6,
    20, 16, 18, 13, 15, 19, 30, 28, 31, 22, 22, 9, 6, 4, 5, 5, 13, 6, 14, 15, 3, 7, 0, 5, 0, 5, 7, 8, 8, 10, 14, 6, 6,
    4, 10, 8, 2, 2, 5, 1, 2, 10, 11, 6, 5, 20, 6, 4, 5, 13, 6, 6, 10, 14, 19, 5, 10, 10, 15, 13, 11, 23, 28, 27, 33, 1,
    4, 8, 7, 10, 2, 8, 5, 10, 5, 5, 7, 10, 8, 16, 17, 22, 27, 32, 32, 37, 63, 44, 37, 47, 38, 33, 37, 31, 55, 56, 65,
    52, 50, 26, 42, 32, 51, 26, 27, 37, 51, 35, 37, 36, 33, 31, 41, 53, 100, 81, 171, 60, 163, 50, 84, 45, 39, 25, 21,
    22, 19, 26, 20, 27, 37, 53, 43, 32, 51, 40, 54, 45, 29, 18, 16, 23, 20, 28, 10, 28, 22, 18, 29, 44, 35, 46, 40, 57,
    61, 58, 94, 51, 50, 41, 27, 27, 19, 19, 14, 20, 30, 34, 24, 30, 27, 39, 20, 28, 20, 8, 9, 25, 19, 21, 15, 32, 42,
    21, 41, 22, 18, 13, 14, 7, 7, 14, 14, 16, 23, 16, 31, 18, 13, 19, 7, 23, 28, 39, 28, 19, 38, 24, 33, 17, 23, 32, 16,
    46, 32, 45, 76, 66, 70, 66, 53, 42, 43, 39, 53, 91, 68, 41, 74, 54, 25, 38, 31, 29, 18, 18, 17, 16, 19, 25, 16, 12,
    8, 4, 5, 6, 11, 15, 10, 8, 19, 13, 11, 21, 11, 15, 25, 14, 19, 20, 31, 31, 23, 14, 12, 11, 4, 12, 13, 7, 7, 11, 26,
    14, 39, 19, 16, 18, 18, 10, 9, 14, 10, 7, 12, 33, 18, 7, 3, 12, 8, 6, 6, 4, 5, 8, 3, 9, 3, 2, 3, 0, 3, 3, 4, 7, 6,
    4, 7, 5, 8, 5, 4, 1, 0, 3, 4, 5, 2, 5, 4, 4, 6, 9, 4, 2, 2, 4, 6, 1, 2, 3, 4, 7, 2, 2, 8, 9, 4, 6, 6, 8, 7, 6, 3, 6,
    10, 14, 12, 1, 1, 3, 3, 1, 4, 2, 2, 0, 1, 2, 1, 5, 1, 1, 4, 3, 1, 6, 9, 4, 1, 0, 0, 1, 0, 2, 1, 2, 6, 1, 2, 7, 16,
    3, 2, 4, 2, 3, 2, 3, 2, 1, 5, 0, 4, 2, 2, 1, 0, 2, 4, 4, 4, 3, 3, 3, 0, 1, 3, 5, 6, 3, 2, 5, 1, 3, 7, 5, 1, 2, 0, 1,
    0, 2, 5, 3, 1, 2, 1, 1, 4, 5, 5, 3, 1, 3, 0, 1, 2, 4, 5, 8, 9, 9, 18, 15, 4, 2, 1, 3, 0, 0, 1, 2, 4, 1, 4, 3, 1, 4,
    2, 6, 0, 3, 1, 2, 0, 0, 1, 1, 0, 0, 0, 0, 2, 3, 3, 2, 3, 3, 1, 1, 0, 1, 0, 0, 1, 2, 1, 1, 2, 0, 0, 3, 0, 0, 1, 2, 1,
    0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 2, 1, 1, 2, 2, 1, 2, 1, 1, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    1, 0, 0, 0, 0, 2, 1, 0, 1, 0, 0, 0, 1, 3, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1,
    2, 1, 1, 1, 0, 1
};


static const std::vector<unsigned> match_len_freq = {
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6245, 4828, 4048,
    3440, 2966, 2475, 2267, 1967, 1648, 1392, 1372, 1354, 1284, 1243, 1165, 1192, 1099, 988, 861, 799, 596, 544, 525,
    528, 520, 504, 475, 461, 387, 328, 373, 371, 433, 457, 602, 547, 487, 478, 344, 337, 294, 266, 239, 255, 259, 194,
    217, 191, 205, 190, 161, 125, 183, 150, 113, 136, 135, 164, 138, 146, 113, 73, 93, 98, 114, 118, 146, 138, 159, 117,
    107, 101, 94, 97, 84, 44, 66, 73, 84, 72, 60, 64, 56, 56, 36, 41, 34, 53, 48, 39, 36, 42, 43, 37, 51, 62, 48, 62,
    46, 36, 85, 87, 70, 80, 64, 73, 62, 87, 48, 75, 29, 32, 20, 16, 26, 22, 29, 16, 28, 13, 24, 19, 27, 24, 24, 21, 19,
    17, 27, 17, 22, 17, 12, 11, 22, 11, 16, 20, 8, 20, 13, 16, 13, 16, 10, 10, 12, 12, 12, 15, 13, 7, 19, 17, 20, 10,
    19, 16, 24, 16, 12, 30, 32, 39, 9, 20, 27, 20, 13, 18, 20, 5, 8, 8, 7, 14, 6, 10, 4, 10, 8, 10, 13, 14, 12, 10, 16,
    23, 15, 20, 11, 18, 21, 24, 24, 35, 46, 77, 78, 80, 96, 75, 85, 90, 52, 35, 31, 26, 21, 16, 18, 22, 21, 34, 55, 66,
    103, 125, 163, 227, 238, 241, 236, 231, 281, 783, 291, 110, 80, 56, 50, 45, 72, 69, 75, 297, 389, 478, 235, 121,
    114, 87, 90, 81, 82, 75, 46, 61, 49, 49, 62, 32, 40, 37, 44, 26, 24, 40, 18, 15, 27, 21, 26, 21, 24, 15, 17, 18,
    3659
};

static const std::vector<unsigned> d1_freq = {4894, 6201, 36038, 1867, 121, 0, 0, 0, 14591, 6, 25, 0, 0, 0, 0, 0,};
static const std::vector<unsigned> data_size_freq = {
    22, 23, 2058, 4, 88, 199, 75, 641, 53, 90, 31, 54, 4, 17, 2, 12, 13, 8, 4, 7, 2, 12, 7, 5, 4, 4, 4, 1, 1, 0, 2, 760,
    43, 250, 44, 168, 103, 51, 85, 677, 101, 107, 35, 72, 3564, 29, 284, 56, 86, 16, 43, 5, 6927, 8, 90, 15, 30, 119,
    20, 31, 8818, 11, 90, 10, 76, 85, 2133, 432, 4513, 183, 136, 46, 49, 47, 60, 153, 504, 17, 10, 29, 111, 1, 6, 19, 5,
    1, 5, 211, 11, 0, 9, 0, 0, 4, 0, 197, 21, 22, 0, 0, 0, 11, 0, 57, 21, 2, 4, 0, 0, 0, 0, 35, 8, 0, 1, 0, 6, 0, 0, 3,
    13, 0, 0, 0, 1, 0, 7, 9, 23, 15, 27, 29, 32, 36, 9, 6, 10, 1, 1, 0, 1, 0, 0, 11, 2, 0, 0, 0, 5, 17, 0, 11, 9, 0, 1,
    0, 0, 1, 1, 0, 5, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 2, 0, 0, 0, 4, 46, 0, 0, 2, 0, 0, 0, 3,
    2, 0, 0, 0, 0, 0, 0, 4, 0, 2, 0, 8, 0, 0, 0, 1, 0, 0, 0, 4, 2, 0, 2, 1, 0, 16, 0, 6, 0, 0, 0, 5, 0, 0, 0, 8, 0, 0,
    0, 5, 0, 0, 0, 1, 0, 0, 0, 3, 0, 3, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 8, 2, 85, 0, 1, 7, 7, 24, 55, 37, 55, 87,
    52, 55, 50, 49, 35, 42, 18, 6, 0, 65, 2, 1, 6, 0, 14507, 5, 1, 1, 5, 5, 14, 20, 11, 13, 16, 21, 15, 14, 29, 37, 48,
    65, 64, 33, 19, 18, 19, 3, 0, 13, 3, 0, 0, 2, 6, 1, 0, 0, 1, 5, 2, 12, 64, 262, 167, 46, 35, 29, 18, 1, 3, 2, 0, 0,
    4, 2, 0, 8, 2, 2, 0, 0, 3, 1, 12, 2, 4, 10, 10, 17, 18, 15, 11, 10, 35, 41, 50, 57, 66, 44, 15, 5, 2, 0, 53, 5, 8,
    26, 1, 1, 6, 1, 0, 0, 0, 0, 0, 0, 28, 22, 0, 1, 0, 2, 2, 1, 3, 11, 4, 1, 16, 17, 20, 41, 55, 70, 0, 1, 12, 0, 0, 0,
    41, 0, 0, 1, 0, 4, 0, 5, 60, 9, 0, 11, 0, 3, 0, 6, 183, 1023, 0, 5, 0, 2, 1, 0, 9, 50, 0, 2, 0, 8, 5, 0, 11, 114, 0,
    2, 0, 2, 0, 2, 20, 333, 0, 3, 8, 503, 25, 37, 72, 216, 171, 149, 186, 101, 22, 0, 12, 133, 0, 0, 3, 1, 0, 6, 3, 34,
    2, 2, 3, 1, 0, 0, 8, 4, 0, 9, 2, 0, 0, 0, 7, 44, 2, 2, 1, 0, 0, 0, 17, 0, 0, 8, 2, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0,
    9, 0, 2, 0, 2, 2, 0, 5, 10, 0, 2, 0, 0, 1, 0, 4, 971, 0, 3, 5, 0, 25, 0, 0, 15, 0, 0, 0, 0, 0, 12, 0, 1, 0, 30, 0,
    1, 1, 88, 3, 2, 25, 0, 0, 3, 0, 0, 0, 5, 1, 0, 0, 1, 0, 3, 0, 2, 0, 2, 0, 0, 3, 13, 1, 8, 4, 2, 0, 0, 2, 19, 2, 2,
    0, 10, 0, 0, 1, 17, 1, 2, 2, 17, 0, 4, 9, 37, 18, 36, 28, 40, 4, 15, 20, 53, 52, 109, 74, 56, 11, 9, 12, 18, 30,
    134, 40, 19, 5, 10, 10, 22, 37, 66, 37, 17, 5, 5, 4, 0, 6, 111, 9, 82, 5, 1, 0, 10, 10, 348, 2, 5, 4, 5, 1, 4, 1,
    40, 6, 28, 18, 25, 29, 37, 71, 73, 116, 89, 46, 24, 2, 0, 0, 1, 1, 2, 2, 4, 2, 1, 1, 5, 1, 0, 1, 0, 0, 0, 17, 15, 3,
    3, 0, 7, 1, 5, 40, 32, 98, 50, 48, 73, 61, 36, 25, 25, 4, 0, 0, 0, 0, 0, 24, 21, 62, 23, 1, 36, 4, 5, 25, 29, 428,
    184, 1, 36, 0, 0, 8, 26, 32, 1, 0, 24, 0, 0, 2, 20, 0, 0, 0, 764, 0, 0, 13, 9, 27, 4, 0, 7, 0, 0, 0, 1, 18, 4, 4, 1,
    0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 2, 4, 1, 0, 0, 0, 8, 4, 19, 2, 0, 0, 0, 1, 1, 3, 4, 2, 10,
    0, 0, 1, 0, 0, 2, 0, 0, 0, 0, 16, 1, 21, 1, 3, 0, 0, 0, 0, 0, 1, 5, 141, 0, 2, 0, 10, 0, 0, 6, 4, 13, 6, 2, 0, 0, 0,
    5, 7, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 7, 1, 0, 0, 0, 2, 1, 0, 3, 0, 0, 0, 0, 1, 0, 0, 5, 0, 0, 0, 0, 3, 2,
    1, 4, 0, 6, 0, 0, 3, 3, 0, 4, 3, 0, 0, 21, 4, 3, 3, 1, 1, 3, 0, 2, 1, 18, 2, 8, 0, 0, 0, 0, 2, 2, 0, 23, 1, 0, 0, 0,
    4, 0, 0, 2, 31, 0, 1, 0, 96, 1, 2, 3, 1, 0, 7, 1, 0, 2, 0, 1, 8, 0, 0, 0, 0, 0, 29, 12, 0, 1, 0, 0, 7, 1, 0, 1, 1,
    19, 0, 0, 0, 1, 0, 7, 2, 15, 0, 0, 0, 0, 1, 7, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 6, 2, 0, 0,
    13, 0, 1, 0, 0, 0, 4, 0, 24, 1, 1, 0, 0, 1, 0, 1, 15, 1, 12, 0, 0, 1, 11, 0, 8, 6, 0, 0, 0, 1, 0, 1, 1, 11, 2, 0, 0,
    0, 0, 0, 5, 2, 0, 0, 0, 0, 0, 0, 24, 2, 0, 0, 0, 0, 0, 14,
};


static const std::vector<unsigned> bytes_freq = {
    64447, 19336, 13382, 11526, 10742, 8228, 9038, 8132, 9540, 6786, 7222, 5870, 8186, 5945, 6402, 5848, 9678, 5730,
    5871, 5364, 6906, 5249, 5177, 4914, 7402, 5549, 5390, 4919, 5855, 4939, 4926, 5274, 10452, 5607, 5486, 5133, 5657,
    4820, 5251, 4777, 7096, 4930, 4810, 4382, 5067, 4474, 4471, 4577, 7732, 4835, 5242, 4603, 4988, 4909, 4605, 4517,
    5822, 4636, 4659, 4503, 4815, 4345, 4755, 4584, 15194, 5338, 5226, 5024, 5270, 4751, 4925, 4387, 5621, 4667, 4885,
    4310, 5141, 4588, 4549, 4353, 8991, 4683, 4657, 4589, 5200, 4390, 4238, 4245, 5178, 4229, 4377, 4169, 4649, 4220,
    4253, 4383, 8620, 4906, 4749, 4385, 5238, 4473, 4473, 4139, 5060, 4241, 4835, 4002, 4638, 4056, 4307, 3928, 5915,
    4527, 4854, 4205, 4726, 4247, 4219, 3981, 4856, 4193, 4176, 4074, 4650, 4268, 4359, 4318, 18775, 5808, 5738, 5038,
    5461, 4840, 5092, 4624, 5656, 4680, 4927, 4226, 4974, 4543, 4449, 4310, 6594, 4533, 4560, 4369, 5470, 4287, 4339,
    4109, 5320, 4453, 4542, 4080, 4583, 4232, 4206, 4102, 9560, 4781, 4517, 4359, 4710, 4410, 4550, 4173, 5793, 4295,
    4471, 3985, 4491, 3860, 4096, 3926, 5756, 4334, 4416, 3954, 4299, 4075, 4040, 3736, 4795, 4183, 4388, 3846, 4401,
    3994, 4250, 4094, 10311, 5186, 5063, 4623, 4814, 4396, 4314, 4319, 5460, 4373, 4635, 4173, 4679, 4056, 4241, 4083,
    5897, 4313, 4389, 4127, 5195, 4185, 4101, 4131, 4885, 3988, 4175, 3904, 4422, 4002, 4057, 4040, 7085, 4627, 4549,
    4127, 4717, 4323, 4043, 3967, 5003, 4142, 4278, 3875, 4460, 3955, 3900, 4032, 5737, 4287, 4396, 3971, 4510, 4018,
    4121, 3967, 4887, 4265, 4416, 3941, 4628, 4125, 4316, 9840,
};


struct Node {
    Ptr<Node> left{};
    Ptr<Node> right{};
    unsigned freq{};
    unsigned symbol{-1u};
    unsigned min_symbol{-1u};
    unsigned min_depth{-1u};

    explicit Node(unsigned symbol, unsigned freq) : symbol(symbol), freq(freq) {
        min_symbol = symbol;
        min_depth = 0;
    }

    explicit Node(Ptr<Node> left, Ptr<Node> right) : left(left), right(right) {
        freq = left->freq + right->freq;
        min_symbol = std::min(min_symbol, left->min_symbol);
        min_symbol = std::min(min_symbol, right->min_symbol);
        min_depth = std::min(left->min_depth, right->min_depth) + 1;
    }
};

struct HuffmanEncoderDecoder {
    // 0 ... n -> bitstrings
    // (code, length)
    std::vector<std::pair<uint64_t, uint8_t> > codes{};
    Ptr<Node> root{};

    explicit HuffmanEncoderDecoder(const std::vector<unsigned>& freq, bool verbose = false) {
        // build a tree
        auto cmp = [&](const Ptr<Node>& a, const Ptr<Node>& b) {
            if (a == b) {
                return false;
            }
            if (a->freq != b->freq) {
                return a->freq < b->freq;
            }
            if (a->min_depth != b->min_depth) {
                return a->min_depth < b->min_depth;
            }
            CHECK(a->min_symbol != b->min_symbol);
            return a->min_symbol < b->min_symbol;
        };

        unsigned sum_freq = 0;
        std::set<Ptr<Node>, decltype(cmp)> nodes(cmp);
        for (unsigned s = 0; s < freq.size(); ++s) {
            const auto f = std::max(1u, freq[s]);
            // if (freq[s] > 0) {
            nodes.insert(std::make_shared<Node>(s, f));
            sum_freq += f;
            // }
        }
        const unsigned cnt_alive_symbols = nodes.size();
        CHECK(!nodes.empty());
        while (nodes.size() > 1) {
            auto a = *nodes.begin();
            nodes.erase(nodes.begin());
            auto b = *nodes.begin();
            nodes.erase(nodes.begin());

            nodes.insert(std::make_shared<Node>(a, b));
        }
        root = *nodes.begin();

        // calculate codes
        codes.resize(freq.size());
        unsigned sum_code_lengths = 0;
        unsigned sum_code_lengths_weighted = 0;
        uint8_t max_code_length = 0;
        auto dfs = [&](auto&& self, Ptr<Node> v, uint64_t code, uint8_t code_length) {
            if (v->symbol != -1u) {
                CHECK(code_length <= 64);
                codes[v->symbol] = {code, code_length};
                sum_code_lengths += code_length;
                sum_code_lengths_weighted += code_length * v->freq;
                max_code_length = std::max(max_code_length, code_length);
                return;
            }

            self(self, v->left, code * 2, code_length + 1);

            self(self, v->right, code * 2 + 1, code_length + 1);
        };

        dfs(dfs, root, 0, 0);

        if (verbose) {
            std::cout << "HUFFMAN stats: " << std::endl;
            std::cout << "naive bits per symbol: " << int(len_in_bits(freq.size() - 1)) << std::endl;
            std::cout << "huffman bits per symbol: " << sum_code_lengths * 1.0 / freq.size() << std::endl;
            std::cout << "huffman bits per symbol weighted: " << sum_code_lengths_weighted * 1.0 / sum_freq <<
                    std::endl;
            std::cout << "cnt symbols with freq > 0: " << cnt_alive_symbols << " out of " << freq.size() << std::endl;
            std::cout << "max_code_length: " << int(max_code_length) << std::endl;
        }
    }

    unsigned encode_symbol(td::BitPtr& bit_ptr, const unsigned s) const {
        const auto& code = codes[s];
        // std::cout << "s = " << s << std::endl;
        CHECK(code.second > 0);
        bit_ptr.store_uint(code.first, code.second);
        bit_ptr.offs += code.second;
        return code.second;
    }

    unsigned decode_symbol(td::BitPtr& bit_ptr, const unsigned ptr_len = -1u) const {
        const unsigned initial_offs = bit_ptr.offs;
        CHECK(root);
        Ptr<Node> v = root;
        while (v->symbol == -1u) {
            if (ptr_len <= bit_ptr.offs) {
                CHECK(bit_ptr.offs == ptr_len);
                bit_ptr.offs = initial_offs;
                return -1u;
            }
            bool bit = bit_ptr.get_uint(1);
            bit_ptr.offs += 1u;
            if (bit) {
                v = v->right;
            } else {
                v = v->left;
            }
            CHECK(v);
        }
        CHECK(bit_ptr.offs <= ptr_len);
        CHECK(!v->left);
        CHECK(!v->right);
        return v->symbol;
    }
};

std::basic_string<uint8_t> encode_8(const std::basic_string<uint8_t>& data) {
    HuffmanEncoderDecoder encoder(bytes_freq);

    std::basic_string<uint8_t> result(data.size() * 2, 0);
    td::BitPtr bits(result.data(), 0);
    for (const auto byte: data) {
        encoder.encode_symbol(bits, byte);
    }
    bits.store_uint(1, 1);
    bits.offs += 1;
    const unsigned new_size = (bits.offs + 7) / 8;
    CHECK(result.size() >= new_size);
    result.resize(new_size);
    return result;
}

std::basic_string<uint8_t> decode_8(std::basic_string<uint8_t>& data) {
    HuffmanEncoderDecoder decoder(bytes_freq);

    std::basic_string<uint8_t> result;
    td::BitPtr bits(data.data(), 0);
    unsigned cnt_bits = data.size() * 8;
    CHECK(data.back() != 0);
    for (unsigned tail = 0; tail < 8; ++tail) {
        if ((data.back() >> tail) & 1) {
            cnt_bits -= (tail + 1);
            break;
        }
    }

    while (bits.offs < cnt_bits) {
        const auto symbol = decoder.decode_symbol(bits);
        result.push_back(symbol);
    }
    return result;
}
};
